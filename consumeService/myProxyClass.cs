//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.6.81.0.
// 

namespace consumeService { 
/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name = "WebServiceSoap", Namespace = "http://tempuri.org/")]
public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {

    private System.Threading.SendOrPostCallback AddOperationCompleted;

    private System.Threading.SendOrPostCallback SubOperationCompleted;

    private System.Threading.SendOrPostCallback MulOperationCompleted;

    private System.Threading.SendOrPostCallback DivOperationCompleted;

    /// <remarks/>
    public WebService() {
        this.Url = "http://localhost:49248/WebService.asmx";
    }

    /// <remarks/>
    public event AddCompletedEventHandler AddCompleted;

    /// <remarks/>
    public event SubCompletedEventHandler SubCompleted;

    /// <remarks/>
    public event MulCompletedEventHandler MulCompleted;

    /// <remarks/>
    public event DivCompletedEventHandler DivCompleted;

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Add", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int Add(int x, int y) {
        object[] results = this.Invoke("Add", new object[] {
                    x,
                    y});
        return ((int)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginAdd(int x, int y, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Add", new object[] {
                    x,
                    y}, callback, asyncState);
    }

    /// <remarks/>
    public int EndAdd(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }

    /// <remarks/>
    public void AddAsync(int x, int y) {
        this.AddAsync(x, y, null);
    }

    /// <remarks/>
    public void AddAsync(int x, int y, object userState) {
        if ((this.AddOperationCompleted == null)) {
            this.AddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOperationCompleted);
        }
        this.InvokeAsync("Add", new object[] {
                    x,
                    y}, this.AddOperationCompleted, userState);
    }

    private void OnAddOperationCompleted(object arg) {
        if ((this.AddCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddCompleted(this, new AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Sub", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int Sub(int x, int y) {
        object[] results = this.Invoke("Sub", new object[] {
                    x,
                    y});
        return ((int)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginSub(int x, int y, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Sub", new object[] {
                    x,
                    y}, callback, asyncState);
    }

    /// <remarks/>
    public int EndSub(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }

    /// <remarks/>
    public void SubAsync(int x, int y) {
        this.SubAsync(x, y, null);
    }

    /// <remarks/>
    public void SubAsync(int x, int y, object userState) {
        if ((this.SubOperationCompleted == null)) {
            this.SubOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubOperationCompleted);
        }
        this.InvokeAsync("Sub", new object[] {
                    x,
                    y}, this.SubOperationCompleted, userState);
    }

    private void OnSubOperationCompleted(object arg) {
        if ((this.SubCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SubCompleted(this, new SubCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Mul", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int Mul(int x, int y) {
        object[] results = this.Invoke("Mul", new object[] {
                    x,
                    y});
        return ((int)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginMul(int x, int y, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Mul", new object[] {
                    x,
                    y}, callback, asyncState);
    }

    /// <remarks/>
    public int EndMul(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }

    /// <remarks/>
    public void MulAsync(int x, int y) {
        this.MulAsync(x, y, null);
    }

    /// <remarks/>
    public void MulAsync(int x, int y, object userState) {
        if ((this.MulOperationCompleted == null)) {
            this.MulOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMulOperationCompleted);
        }
        this.InvokeAsync("Mul", new object[] {
                    x,
                    y}, this.MulOperationCompleted, userState);
    }

    private void OnMulOperationCompleted(object arg) {
        if ((this.MulCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.MulCompleted(this, new MulCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Div", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int Div(int x, int y) {
        object[] results = this.Invoke("Div", new object[] {
                    x,
                    y});
        return ((int)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginDiv(int x, int y, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Div", new object[] {
                    x,
                    y}, callback, asyncState);
    }

    /// <remarks/>
    public int EndDiv(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }

    /// <remarks/>
    public void DivAsync(int x, int y) {
        this.DivAsync(x, y, null);
    }

    /// <remarks/>
    public void DivAsync(int x, int y, object userState) {
        if ((this.DivOperationCompleted == null)) {
            this.DivOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDivOperationCompleted);
        }
        this.InvokeAsync("Div", new object[] {
                    x,
                    y}, this.DivOperationCompleted, userState);
    }

    private void OnDivOperationCompleted(object arg) {
        if ((this.DivCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DivCompleted(this, new DivCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
public delegate void AddCompletedEventHandler(object sender, AddCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

    private object[] results;

    internal AddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState) {
        this.results = results;
    }

    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
public delegate void SubCompletedEventHandler(object sender, SubCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SubCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

    private object[] results;

    internal SubCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState) {
        this.results = results;
    }

    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
public delegate void MulCompletedEventHandler(object sender, MulCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class MulCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

    private object[] results;

    internal MulCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState) {
        this.results = results;
    }

    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
public delegate void DivCompletedEventHandler(object sender, DivCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.81.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DivCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {

    private object[] results;

    internal DivCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState) {
        this.results = results;
    }

    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}
}
